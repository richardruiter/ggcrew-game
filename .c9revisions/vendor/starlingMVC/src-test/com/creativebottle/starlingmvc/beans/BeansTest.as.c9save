{"ts":1378934704252,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\n * Copyright 2012 StarlingMVC Framework Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\npackage com.creativebottle.starlingmvc.beans\n{\n\timport com.creativebottle.starlingmvc.mock.model.TestModel;\n\timport com.creativebottle.starlingmvc.mock.model.TestModel2;\n\n\timport org.flexunit.asserts.assertEquals;\n\timport org.flexunit.asserts.assertNull;\n\n\tpublic class BeansTest\n\t{\n\t\tprivate var beans:Beans;\n\n\t\t[Before]\n\t\tpublic function setup():void\n\t\t{\n\t\t\tbeans = new Beans();\n\t\t}\n\n\t\t[After]\n\t\tpublic function teardown():void\n\t\t{\n\t\t\tbeans = null;\n\t\t}\n\n\t\t[Test]\n\t\tpublic function addBean_beanWithNoIdRetrievableByType_returnsBean():void\n\t\t{\n\t\t\tvar beanIn:Bean = new Bean(new TestModel());\n\n\t\t\tbeans.addBean(beanIn);\n\n\t\t\tvar beanOut:Bean = beans.getBeanByClass(TestModel);\n\n\t\t\tassertEquals(\"Beans should be equal.\", beanIn, beanOut);\n\t\t}\n\n\t\t[Test]\n\t\tpublic function addBean_beanWithIdRetrievableById_returnsBean():void\n\t\t{\n\t\t\tvar beanIn:Bean = new Bean(new TestModel(), \"testBean\");\n\n\t\t\tbeans.addBean(beanIn);\n\n\t\t\tvar beanOut:Bean = beans.getBeanById(\"testBean\");\n\n\t\t\tassertEquals(\"Beans should be equal.\", beanIn, beanOut);\n\t\t}\n\n\t\t[Test(expects=\"com.creativebottle.starlingmvc.errors.BeanNotFoundError\")]\n\t\tpublic function addBean_beanWithNoIdNotRetrievableById_throwsError():void\n\t\t{\n\t\t\tvar beanIn:Bean = new Bean(new TestModel());\n\n\t\t\tbeans.addBean(beanIn);\n\n\t\t\tbeans.getBeanById(\"testBean\");\n\t\t}\n\n\t\t[Test]\n\t\tpublic function addBean_beanWithIdNotRetrievableByType_returnsNull():void\n\t\t{\n\t\t\tvar beanIn:Bean = new Bean(new TestModel(), \"testBean\");\n\n\t\t\tbeans.addBean(beanIn);\n\n\t\t\tvar bean:Bean = beans.getBeanByClass(TestModel);\n\n\t\t\tassertNull(\"bean should be null\", bean);\n\t\t}\n\n\t\t[Test]\n\t\tpublic function addBean_nonBean_returnsBeanWithObjectAsInstance():void\n\t\t{\n\t\t\tvar beanIn:TestModel = new TestModel();\n\n\t\t\tbeans.addBean(beanIn);\n\n\t\t\tvar beanOut:Bean = beans.getBeanByClass(TestModel);\n\n\t\t\tassertEquals(\"Bean instance should equal beanIn.\", beanIn, beanOut.instance);\n\t\t}\n\n\t\t[Test]\n\t\tpublic function addBeans_returnsBeans():void\n\t\t{\n\t\t\tvar b:Array = [new TestModel(), new TestModel2()];\n\n\t\t\tbeans.addBeans(b);\n\n\t\t\tvar beanOut:Bean = beans.getBeanByClass(TestModel2);\n\n\t\t\tassertEquals(\"beanOut.instance should equal the second object in the array.\", b[1], beanOut.instance);\n\t\t}\n\n\t\t[Test(expects=\"com.creativebottle.starlingmvc.errors.BeanNotFoundError\")]\n\t\tpublic function removeBean_beanWithId_throwsError():void\n\t\t{\n\t\t\tvar beanIn:Bean = new Bean(new TestModel(), \"testBean\");\n\n\t\t\tbeans.addBean(beanIn);\n\t\t\tbeans.removeBean(beanIn);\n\n\t\t\tbeans.getBeanById(\"testBean\");\n\t\t}\n\n\t\t[Test]\n\t\tpublic function removeBean_beanWithNoId_returnsNull():void\n\t\t{\n\t\t\tvar beanIn:Bean = new Bean(new TestModel());\n\n\t\t\tbeans.addBean(beanIn);\n\t\t\tbeans.removeBean(beanIn);\n\n\t\t\tvar bean:Bean = beans.getBeanByClass(TestModel);\n\n\t\t\tassertNull(\"Bean should be null\", bean);\n\t\t}\n\n\t\t[Test]\n\t\tpublic function addBeanProvider_mixedBeans_retrieveByType_returnsBean():void\n\t\t{\n\t\t\tvar beanProvider:BeanProvider = new BeanProvider();\n\t\t\tbeanProvider.beans = [new TestModel(), new Bean(new TestModel2(), \"testModel2\")];\n\n\t\t\tbeans.addBeanProvider(beanProvider);\n\n\t\t\tvar beanOut:Bean = beans.getBeanByClass(TestModel);\n\n\t\t\tassertEquals(\"Method should return first bean in the provider.\", beanProvider.beans[0], beanOut.instance);\n\t\t}\n\n\t\t[Test]\n\t\tpublic function addBeanProvider_mixedBeans_retrieveById_returnsBean():void\n\t\t{\n\t\t\tvar beanProvider:BeanProvider = new BeanProvider();\n\t\t\tbeanProvider.beans = [new TestModel(), new Bean(new TestModel2(), \"testModel2\")];\n\n\t\t\tbeans.addBeanProvider(beanProvider);\n\n\t\t\tvar beanOut:Bean = beans.getBeanById(\"testModel2\");\n\n\t\t\tassertEquals(\"Method should return first bean in the provider.\", beanProvider.beans[1], beanOut);\n\t\t}\n\n\t}\n}"]],"start1":0,"start2":0,"length1":0,"length2":4298}]],"length":4298}
