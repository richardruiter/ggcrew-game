{"ts":1378889870078,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\nFeathers\nCopyright 2012-2013 Joshua Tynjala. All Rights Reserved.\n\nThis program is free software. You can redistribute and/or modify it in\naccordance with the terms of the accompanying license agreement.\n*/\npackage feathers.controls\n{\n\timport feathers.controls.supportClasses.LayoutViewPort;\n\timport feathers.core.IFeathersControl;\n\timport feathers.layout.ILayout;\n\timport feathers.layout.IVirtualLayout;\n\n\timport starling.display.DisplayObject;\n\timport starling.display.DisplayObjectContainer;\n\timport starling.events.Event;\n\n\t/**\n\t * Dispatched when the container is scrolled.\n\t *\n\t * @eventType starling.events.Event.SCROLL\n\t */\n\t[Event(name=\"change\",type=\"starling.events.Event\")]\n\n\t[DefaultProperty(\"mxmlContent\")]\n\t/**\n\t * A generic container that supports layout, scrolling, and a background\n\t * skin. For a lighter container, see <code>LayoutGroup</code>, which\n\t * focuses specifically on layout without scrolling.\n\t *\n\t * <p>The following example creates a scroll container with a horizontal\n\t * layout and adds two buttons to it:</p>\n\t *\n\t * <listing version=\"3.0\">\n\t * var container:ScrollContainer = new ScrollContainer();\n\t * var layout:HorizontalLayout = new HorizontalLayout();\n\t * layout.gap = 20;\n\t * layout.padding = 20;\n\t * container.layout = layout;\n\t * this.addChild( container );\n\t *\n\t * var yesButton:Button = new Button();\n\t * yesButton.label = \"Yes\";\n\t * container.addChild( yesButton );\n\t *\n\t * var noButton:Button = new Button();\n\t * noButton.label = \"No\";\n\t * container.addChild( noButton );</listing>\n\t *\n\t * @see http://wiki.starling-framework.org/feathers/scroll-container\n\t * @see feathers.controls.LayoutGroup\n\t */\n\tpublic class ScrollContainer extends Scroller\n\t{\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tprotected static const INVALIDATION_FLAG_MXML_CONTENT:String = \"mxmlContent\";\n\n\t\t/**\n\t\t * An alternate name to use with ScrollContainer to allow a theme to\n\t\t * give it a toolbar style. If a theme does not provide a skin for the\n\t\t * toolbar style, the theme will automatically fall back to using the\n\t\t * default scroll container skin.\n\t\t *\n\t\t * <p>An alternate name should always be added to a component's\n\t\t * <code>nameList</code> before the component is added to the stage for\n\t\t * the first time.</p>\n\t\t *\n\t\t * <p>In the following example, the toolbar style is applied to a scroll\n\t\t * container:</p>\n\t\t *\n\t\t * <listing version=\"3.0\">\n\t\t * var container:ScrollContainer = new ScrollContainer();\n\t\t * container.nameList.add( ScrollContainer.ALTERNATE_NAME_TOOLBAR );\n\t\t * this.addChild( container );</listing>\n\t\t *\n\t\t * @see feathers.core.IFeathersControl#nameList\n\t\t */\n\t\tpublic static const ALTERNATE_NAME_TOOLBAR:String = \"feathers-toolbar-scroll-container\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#SCROLL_POLICY_AUTO\n\t\t *\n\t\t * @see feathers.controls.Scroller#horizontalScrollPolicy\n\t\t * @see feathers.controls.Scroller#verticalScrollPolicy\n\t\t */\n\t\tpublic static const SCROLL_POLICY_AUTO:String = \"auto\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#SCROLL_POLICY_ON\n\t\t *\n\t\t * @see feathers.controls.Scroller#horizontalScrollPolicy\n\t\t * @see feathers.controls.Scroller#verticalScrollPolicy\n\t\t */\n\t\tpublic static const SCROLL_POLICY_ON:String = \"on\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#SCROLL_POLICY_OFF\n\t\t *\n\t\t * @see feathers.controls.Scroller#horizontalScrollPolicy\n\t\t * @see feathers.controls.Scroller#verticalScrollPolicy\n\t\t */\n\t\tpublic static const SCROLL_POLICY_OFF:String = \"off\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FLOAT\n\t\t *\n\t\t * @see feathers.controls.Scroller#scrollBarDisplayMode\n\t\t */\n\t\tpublic static const SCROLL_BAR_DISPLAY_MODE_FLOAT:String = \"float\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_FIXED\n\t\t *\n\t\t * @see feathers.controls.Scroller#scrollBarDisplayMode\n\t\t */\n\t\tpublic static const SCROLL_BAR_DISPLAY_MODE_FIXED:String = \"fixed\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#SCROLL_BAR_DISPLAY_MODE_NONE\n\t\t *\n\t\t * @see feathers.controls.Scroller#scrollBarDisplayMode\n\t\t */\n\t\tpublic static const SCROLL_BAR_DISPLAY_MODE_NONE:String = \"none\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#INTERACTION_MODE_TOUCH\n\t\t *\n\t\t * @see feathers.controls.Scroller#interactionMode\n\t\t */\n\t\tpublic static const INTERACTION_MODE_TOUCH:String = \"touch\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#INTERACTION_MODE_MOUSE\n\t\t *\n\t\t * @see feathers.controls.Scroller#interactionMode\n\t\t */\n\t\tpublic static const INTERACTION_MODE_MOUSE:String = \"mouse\";\n\n\t\t/**\n\t\t * @copy feathers.controls.Scroller#INTERACTION_MODE_TOUCH_AND_SCROLL_BARS\n\t\t *\n\t\t * @see feathers.controls.Scroller#interactionMode\n\t\t */\n\t\tpublic static const INTERACTION_MODE_TOUCH_AND_SCROLL_BARS:String = \"touchAndScrollBars\";\n\n\t\t/**\n\t\t * Constructor.\n\t\t */\n\t\tpublic function ScrollContainer()\n\t\t{\n\t\t\tconst oldDisplayListBypassEnabled:Boolean = this.displayListBypassEnabled;\n\t\t\tthis.displayListBypassEnabled = false;\n\n\t\t\tsuper();\n\t\t\tthis.layoutViewPort = new LayoutViewPort();\n\t\t\tthis.viewPort = this.layoutViewPort;\n\n\t\t\tthis.displayListBypassEnabled = oldDisplayListBypassEnabled;\n\t\t}\n\n\t\t/**\n\t\t * A flag that indicates if the display list functions like <code>addChild()</code>\n\t\t * and <code>removeChild()</code> will be passed to the internal view\n\t\t * port.\n\t\t */\n\t\tprotected var displayListBypassEnabled:Boolean = true;\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tprotected var layoutViewPort:LayoutViewPort;\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tprotected var _layout:ILayout;\n\n\t\t/**\n\t\t * Controls the way that the container's children are positioned and\n\t\t * sized.\n\t\t *\n\t\t * <p>The following example tells the container to use a horizontal layout:</p>\n\t\t *\n\t\t * <listing version=\"3.0\">\n\t\t * var layout:HorizontalLayout = new HorizontalLayout();\n\t\t * layout.gap = 20;\n\t\t * layout.padding = 20;\n\t\t * container.layout = layout;</listing>\n\t\t *\n\t\t * @default null\n\t\t */\n\t\tpublic function get layout():ILayout\n\t\t{\n\t\t\treturn this._layout;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tpublic function set layout(value:ILayout):void\n\t\t{\n\t\t\tif(this._layout == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._layout = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_LAYOUT);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tprotected var _mxmlContentIsReady:Boolean = false;\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tprotected var _mxmlContent:Array;\n\n\t\t[ArrayElementType(\"feathers.core.IFeathersControl\")]\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tpublic function get mxmlContent():Array\n\t\t{\n\t\t\treturn this._mxmlContent;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tpublic function set mxmlContent(value:Array):void\n\t\t{\n\t\t\tif(this._mxmlContent == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(this._mxmlContent && this._mxmlContentIsReady)\n\t\t\t{\n\t\t\t\tconst childCount:int = this._mxmlContent.length;\n\t\t\t\tfor(var i:int = 0; i < childCount; i++)\n\t\t\t\t{\n\t\t\t\t\tvar child:DisplayObject = DisplayObject(this._mxmlContent[i]);\n\t\t\t\t\tthis.removeChild(child, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._mxmlContent = value;\n\t\t\tthis._mxmlContentIsReady = false;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_MXML_CONTENT);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function set backgroundSkin(value:DisplayObject):void\n\t\t{\n\t\t\tconst oldDisplayListBypassEnabled:Boolean = this.displayListBypassEnabled;\n\t\t\tthis.displayListBypassEnabled = false;\n\t\t\tsuper.backgroundSkin = value;\n\t\t\tthis.displayListBypassEnabled = oldDisplayListBypassEnabled;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function set backgroundDisabledSkin(value:DisplayObject):void\n\t\t{\n\t\t\tconst oldDisplayListBypassEnabled:Boolean = this.displayListBypassEnabled;\n\t\t\tthis.displayListBypassEnabled = false;\n\t\t\tsuper.backgroundDisabledSkin = value;\n\t\t\tthis.displayListBypassEnabled = oldDisplayListBypassEnabled;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function get numChildren():int\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\treturn super.numChildren;\n\t\t\t}\n\t\t\treturn DisplayObjectContainer(this.viewPort).numChildren;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function getChildByName(name:String):DisplayObject\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\treturn super.getChildByName(name);\n\t\t\t}\n\t\t\treturn DisplayObjectContainer(this.viewPort).getChildByName(name);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function getChildAt(index:int):DisplayObject\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\treturn super.getChildAt(index);\n\t\t\t}\n\t\t\treturn DisplayObjectContainer(this.viewPort).getChildAt(index);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function addChildAt(child:DisplayObject, index:int):DisplayObject\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\treturn super.addChildAt(child, index);\n\t\t\t}\n\t\t\treturn DisplayObjectContainer(this.viewPort).addChildAt(child, index);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function removeChildAt(index:int, dispose:Boolean = false):DisplayObject\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\treturn super.removeChildAt(index, dispose);\n\t\t\t}\n\t\t\treturn DisplayObjectContainer(this.viewPort).removeChildAt(index, dispose);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function getChildIndex(child:DisplayObject):int\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\treturn super.getChildIndex(child);\n\t\t\t}\n\t\t\treturn DisplayObjectContainer(this.viewPort).getChildIndex(child);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function setChildIndex(child:DisplayObject, index:int):void\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\tsuper.setChildIndex(child, index);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDisplayObjectContainer(this.viewPort).setChildIndex(child, index);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function swapChildrenAt(index1:int, index2:int):void\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\tsuper.swapChildrenAt(index1, index2);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDisplayObjectContainer(this.viewPort).swapChildrenAt(index1, index2);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function sortChildren(compareFunction:Function):void\n\t\t{\n\t\t\tif(!this.displayListBypassEnabled)\n\t\t\t{\n\t\t\t\tsuper.sortChildren(compareFunction);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tDisplayObjectContainer(this.viewPort).sortChildren(compareFunction);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function dispatchEvent(event:Event):void\n\t\t{\n\t\t\tconst oldDisplayListBypassEnabled:Boolean = this.displayListBypassEnabled;\n\t\t\tthis.displayListBypassEnabled = true;\n\t\t\tsuper.dispatchEvent(event);\n\t\t\tthis.displayListBypassEnabled = oldDisplayListBypassEnabled;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride public function validate():void\n\t\t{\n\t\t\tconst oldDisplayListBypassEnabled:Boolean = this.displayListBypassEnabled;\n\t\t\tthis.displayListBypassEnabled = false;\n\t\t\tsuper.validate();\n\t\t\tthis.displayListBypassEnabled = oldDisplayListBypassEnabled;\n\t\t}\n\n\t\t/**\n\t\t * Readjusts the layout of the container according to its current\n\t\t * content. Call this method when changes to the content cannot be\n\t\t * automatically detected by the container. For instance, Feathers\n\t\t * components dispatch <code>FeathersEventType.RESIZE</code> when their\n\t\t * width and height values change, but standard Starling display objects\n\t\t * like <code>Sprite</code> and <code>Image</code> do not.\n\t\t */\n\t\tpublic function readjustLayout():void\n\t\t{\n\t\t\tthis.layoutViewPort.readjustLayout();\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SIZE);\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride protected function initialize():void\n\t\t{\n\t\t\tsuper.initialize();\n\t\t\tthis.refreshMXMLContent();\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\toverride protected function draw():void\n\t\t{\n\t\t\tconst sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);\n\t\t\tconst stylesInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STYLES);\n\t\t\tconst stateInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_STATE);\n\t\t\tconst layoutInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_LAYOUT);\n\t\t\tconst mxmlContentInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_MXML_CONTENT);\n\n\t\t\tif(mxmlContentInvalid)\n\t\t\t{\n\t\t\t\tthis.refreshMXMLContent();\n\t\t\t}\n\n\t\t\tif(layoutInvalid)\n\t\t\t{\n\t\t\t\tif(this._layout is IVirtualLayout)\n\t\t\t\t{\n\t\t\t\t\tIVirtualLayout(this._layout).useVirtualLayout = false;\n\t\t\t\t}\n\t\t\t\tthis.layoutViewPort.layout = this._layout;\n\t\t\t}\n\n\t\t\tsuper.draw();\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tprotected function refreshMXMLContent():void\n\t\t{\n\t\t\tif(!this._mxmlContent || this._mxmlContentIsReady)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst childCount:int = this._mxmlContent.length;\n\t\t\tfor(var i:int = 0; i < childCount; i++)\n\t\t\t{\n\t\t\t\tvar child:DisplayObject = DisplayObject(this._mxmlContent[i]);\n\t\t\t\tthis.addChild(child);\n\t\t\t}\n\t\t\tthis._mxmlContentIsReady = true;\n\t\t}\n\t}\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":12453}]],"length":12453}
