{"ts":1378904965694,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*\nFeathers\nCopyright 2012-2013 Joshua Tynjala. All Rights Reserved.\n\nThis program is free software. You can redistribute and/or modify it in\naccordance with the terms of the accompanying license agreement.\n*/\npackage feathers.controls.supportClasses\n{\n\timport feathers.controls.LayoutGroup;\n\timport feathers.controls.Scroller;\n\timport feathers.core.FeathersControl;\n\timport feathers.core.IFeathersControl;\n\timport feathers.events.FeathersEventType;\n\timport feathers.layout.ILayout;\n\timport feathers.layout.ILayoutDisplayObject;\n\timport feathers.layout.IVirtualLayout;\n\timport feathers.layout.LayoutBoundsResult;\n\timport feathers.layout.ViewPortBounds;\n\n\timport flash.geom.Point;\n\n\timport starling.display.DisplayObject;\n\timport starling.events.Event;\n\n\t/**\n\t * @private\n\t * Used internally by ScrollContainer. Not meant to be used on its own.\n\t */\n\tpublic final class LayoutViewPort extends LayoutGroup implements IViewPort\n\t{\n\t\tpublic function LayoutViewPort()\n\t\t{\n\t\t}\n\n\t\tprivate var _minVisibleWidth:Number = 0;\n\n\t\tpublic function get minVisibleWidth():Number\n\t\t{\n\t\t\treturn this._minVisibleWidth;\n\t\t}\n\n\t\tpublic function set minVisibleWidth(value:Number):void\n\t\t{\n\t\t\tif(this._minVisibleWidth == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(isNaN(value))\n\t\t\t{\n\t\t\t\tthrow new ArgumentError(\"minVisibleWidth cannot be NaN\");\n\t\t\t}\n\t\t\tthis._minVisibleWidth = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SIZE);\n\t\t}\n\n\t\tprivate var _maxVisibleWidth:Number = Number.POSITIVE_INFINITY;\n\n\t\tpublic function get maxVisibleWidth():Number\n\t\t{\n\t\t\treturn this._maxVisibleWidth;\n\t\t}\n\n\t\tpublic function set maxVisibleWidth(value:Number):void\n\t\t{\n\t\t\tif(this._maxVisibleWidth == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(isNaN(value))\n\t\t\t{\n\t\t\t\tthrow new ArgumentError(\"maxVisibleWidth cannot be NaN\");\n\t\t\t}\n\t\t\tthis._maxVisibleWidth = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SIZE);\n\t\t}\n\n\t\tprivate var _visibleWidth:Number = NaN;\n\n\t\tpublic function get visibleWidth():Number\n\t\t{\n\t\t\treturn this._visibleWidth;\n\t\t}\n\n\t\tpublic function set visibleWidth(value:Number):void\n\t\t{\n\t\t\tif(this._visibleWidth == value || (isNaN(value) && isNaN(this._visibleWidth)))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._visibleWidth = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SIZE);\n\t\t}\n\n\t\tprivate var _minVisibleHeight:Number = 0;\n\n\t\tpublic function get minVisibleHeight():Number\n\t\t{\n\t\t\treturn this._minVisibleHeight;\n\t\t}\n\n\t\tpublic function set minVisibleHeight(value:Number):void\n\t\t{\n\t\t\tif(this._minVisibleHeight == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(isNaN(value))\n\t\t\t{\n\t\t\t\tthrow new ArgumentError(\"minVisibleHeight cannot be NaN\");\n\t\t\t}\n\t\t\tthis._minVisibleHeight = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SIZE);\n\t\t}\n\n\t\tprivate var _maxVisibleHeight:Number = Number.POSITIVE_INFINITY;\n\n\t\tpublic function get maxVisibleHeight():Number\n\t\t{\n\t\t\treturn this._maxVisibleHeight;\n\t\t}\n\n\t\tpublic function set maxVisibleHeight(value:Number):void\n\t\t{\n\t\t\tif(this._maxVisibleHeight == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(isNaN(value))\n\t\t\t{\n\t\t\t\tthrow new ArgumentError(\"maxVisibleHeight cannot be NaN\");\n\t\t\t}\n\t\t\tthis._maxVisibleHeight = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SIZE);\n\t\t}\n\n\t\tprivate var _visibleHeight:Number = NaN;\n\n\t\tpublic function get visibleHeight():Number\n\t\t{\n\t\t\treturn this._visibleHeight;\n\t\t}\n\n\t\tpublic function set visibleHeight(value:Number):void\n\t\t{\n\t\t\tif(this._visibleHeight == value || (isNaN(value) && isNaN(this._visibleHeight)))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._visibleHeight = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SIZE);\n\t\t}\n\n\t\tprivate var _contentX:Number = 0;\n\n\t\tpublic function get contentX():Number\n\t\t{\n\t\t\treturn this._contentX;\n\t\t}\n\n\t\tprivate var _contentY:Number = 0;\n\n\t\tpublic function get contentY():Number\n\t\t{\n\t\t\treturn this._contentY;\n\t\t}\n\n\t\tpublic function get horizontalScrollStep():Number\n\t\t{\n\t\t\treturn Math.min(this.actualWidth, this.actualHeight) / 10;\n\t\t}\n\n\t\tpublic function get verticalScrollStep():Number\n\t\t{\n\t\t\treturn Math.min(this.actualWidth, this.actualHeight) / 10;\n\t\t}\n\n\t\tprivate var _horizontalScrollPosition:Number = 0;\n\n\t\tpublic function get horizontalScrollPosition():Number\n\t\t{\n\t\t\treturn this._horizontalScrollPosition;\n\t\t}\n\n\t\tpublic function set horizontalScrollPosition(value:Number):void\n\t\t{\n\t\t\tif(this._horizontalScrollPosition == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._horizontalScrollPosition = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SCROLL);\n\t\t}\n\n\t\tprivate var _verticalScrollPosition:Number = 0;\n\n\t\tpublic function get verticalScrollPosition():Number\n\t\t{\n\t\t\treturn this._verticalScrollPosition;\n\t\t}\n\n\t\tpublic function set verticalScrollPosition(value:Number):void\n\t\t{\n\t\t\tif(this._verticalScrollPosition == value)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._verticalScrollPosition = value;\n\t\t\tthis.invalidate(INVALIDATION_FLAG_SCROLL);\n\t\t}\n\n\t\toverride public function dispose():void\n\t\t{\n\t\t\tthis.layout = null;\n\t\t\tsuper.dispose();\n\t\t}\n\n\t\toverride protected function draw():void\n\t\t{\n\t\t\tconst layoutInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_LAYOUT);\n\t\t\tconst sizeInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SIZE);\n\t\t\tconst scrollInvalid:Boolean = this.isInvalid(INVALIDATION_FLAG_SCROLL);\n\n\t\t\tsuper.draw();\n\n\t\t\tif(scrollInvalid || sizeInvalid || layoutInvalid)\n\t\t\t{\n\t\t\t\tif(this._layout)\n\t\t\t\t{\n\t\t\t\t\tthis._contentX = this._layoutResult.contentX;\n\t\t\t\t\tthis._contentY = this._layoutResult.contentY;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\toverride protected function refreshViewPortBounds():void\n\t\t{\n\t\t\tthis.viewPortBounds.x = 0;\n\t\t\tthis.viewPortBounds.y = 0;\n\t\t\tthis.viewPortBounds.scrollX = this._horizontalScrollPosition;\n\t\t\tthis.viewPortBounds.scrollY = this._verticalScrollPosition;\n\t\t\tthis.viewPortBounds.explicitWidth = this._visibleWidth;\n\t\t\tthis.viewPortBounds.explicitHeight = this._visibleHeight;\n\t\t\tthis.viewPortBounds.minWidth = this._minVisibleWidth;\n\t\t\tthis.viewPortBounds.minHeight = this._minVisibleHeight;\n\t\t\tthis.viewPortBounds.maxWidth = this._maxVisibleWidth;\n\t\t\tthis.viewPortBounds.maxHeight = this._maxVisibleHeight;\n\t\t}\n\n\t\toverride protected function handleManualLayout():Boolean\n\t\t{\n\t\t\tvar minX:Number = 0;\n\t\t\tvar minY:Number = 0;\n\t\t\tvar maxX:Number = isNaN(this.viewPortBounds.explicitWidth) ? 0 : this.viewPortBounds.explicitWidth;\n\t\t\tvar maxY:Number = isNaN(this.viewPortBounds.explicitHeight) ? 0 : this.viewPortBounds.explicitHeight;\n\t\t\tthis._ignoreChildChanges = true;\n\t\t\tconst itemCount:int = this.items.length;\n\t\t\tfor(var i:int = 0; i < itemCount; i++)\n\t\t\t{\n\t\t\t\tvar item:DisplayObject = this.items[i];\n\t\t\t\tif(item is IFeathersControl)\n\t\t\t\t{\n\t\t\t\t\tIFeathersControl(item).validate();\n\t\t\t\t}\n\t\t\t\tvar itemX:Number = item.x;\n\t\t\t\tvar itemY:Number = item.y;\n\t\t\t\tvar itemMaxX:Number = itemX + item.width;\n\t\t\t\tvar itemMaxY:Number = itemY + item.height;\n\t\t\t\tif(!isNaN(itemX) && itemX < minX)\n\t\t\t\t{\n\t\t\t\t\tminX = itemX;\n\t\t\t\t}\n\t\t\t\tif(!isNaN(itemY) && itemY < minY)\n\t\t\t\t{\n\t\t\t\t\tminY = itemY;\n\t\t\t\t}\n\t\t\t\tif(!isNaN(itemMaxX) && itemMaxX > maxX)\n\t\t\t\t{\n\t\t\t\t\tmaxX = itemMaxX;\n\t\t\t\t}\n\t\t\t\tif(!isNaN(itemMaxY) && itemMaxY > maxY)\n\t\t\t\t{\n\t\t\t\t\tmaxY = itemMaxY;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._contentX = minX;\n\t\t\tthis._contentY = minY;\n\t\t\tvar minWidth:Number = this.viewPortBounds.minWidth;\n\t\t\tvar maxWidth:Number = this.viewPortBounds.maxWidth;\n\t\t\tvar minHeight:Number = this.viewPortBounds.minHeight;\n\t\t\tvar maxHeight:Number = this.viewPortBounds.maxHeight;\n\t\t\tvar calculatedWidth:Number = maxX;\n\t\t\tif(calculatedWidth < minWidth)\n\t\t\t{\n\t\t\t\tcalculatedWidth = minWidth;\n\t\t\t}\n\t\t\telse if(calculatedWidth > maxWidth)\n\t\t\t{\n\t\t\t\tcalculatedWidth = maxWidth;\n\t\t\t}\n\t\t\tvar calculatedHeight:Number = maxY;\n\t\t\tif(calculatedHeight < minHeight)\n\t\t\t{\n\t\t\t\tcalculatedHeight = minHeight;\n\t\t\t}\n\t\t\telse if(calculatedHeight > maxHeight)\n\t\t\t{\n\t\t\t\tcalculatedHeight = maxHeight;\n\t\t\t}\n\t\t\tthis._ignoreChildChanges = false;\n\t\t\treturn this.setSizeInternal(calculatedWidth, calculatedHeight, false)\n\t\t}\n\t}\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":7747}]],"length":7747}
